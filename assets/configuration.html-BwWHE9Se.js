import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as s,d as n,e as t,f as r,a,r as p,o as d}from"./app-DMKPzHgi.js";const u={},c={class:"hint-container caution"};function g(m,e){const o=p("RouteLink");return d(),i("div",null,[s("p",null,[e[2]||(e[2]=n("The ")),t(o,{to:"/reference/YouTubeSessionGenerator/YouTubeSessionCreator.html"},{default:r(()=>e[0]||(e[0]=[n("YouTubeSessionCreator")])),_:1}),e[3]||(e[3]=n(" class can be customized using the ")),t(o,{to:"/reference/YouTubeSessionGenerator/YouTubeSessionConfig.html"},{default:r(()=>e[1]||(e[1]=[s("code",null,"YouTubeSessionConfig",-1)])),_:1}),e[4]||(e[4]=n(" object passed to its constructor. This page outlines all available options and how to use them effectively."))]),e[42]||(e[42]=a(`<div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1f1f1f;color:#b392f0;"><pre class="shiki min-dark vp-code"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> YouTubeSessionGenerator;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">YouTubeSessionConfig config </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;">()</span></span>
<span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    JsEnvironment </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> myCustomJsEnvironment</span><span style="color:#BBBBBB;">,</span><span style="color:#6B737C;">  // Required when generating Proof of Origin Tokens</span></span>
<span class="line"><span style="color:#B392F0;">    HttpClient </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> myCustomHttpClient</span><span style="color:#BBBBBB;">,</span><span style="color:#6B737C;">        // Optional: Provide your own HttpClient</span></span>
<span class="line"><span style="color:#B392F0;">    Logger </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> myCustomLogger                 </span><span style="color:#6B737C;">// Optional: Enable logging</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jsenvironment" tabindex="-1"><a class="header-anchor" href="#jsenvironment"><span>JsEnvironment</span></a></h2>`,2)),s("p",null,[e[6]||(e[6]=n("To generate a ")),t(o,{to:"/guide/#proof-of-origin-token"},{default:r(()=>e[5]||(e[5]=[n("Proof of Origin Token")])),_:1}),e[7]||(e[7]=n(" and bypass YouTube’s anti-bot system, ")),e[8]||(e[8]=s("a",{href:"https://botguard.net/en/home",target:"_blank",rel:"noopener noreferrer"},"BotGuard",-1)),e[9]||(e[9]=n(", you need to execute custom JavaScript code in an environment that supports the ")),e[10]||(e[10]=s("a",{href:"https://de.wikipedia.org/wiki/Document_Object_Model",target:"_blank",rel:"noopener noreferrer"},"DOM",-1)),e[11]||(e[11]=n(" (access to ")),e[12]||(e[12]=s("code",null,"window",-1)),e[13]||(e[13]=n(" & ")),e[14]||(e[14]=s("code",null,"document",-1)),e[15]||(e[15]=n(")."))]),s("ul",null,[s("li",null,[e[17]||(e[17]=n("Type: ")),t(o,{to:"/reference/YouTubeSessionGenerator/Js/IJsEnvironment.html"},{default:r(()=>e[16]||(e[16]=[s("code",null,"IJsEnvironment",-1)])),_:1})]),s("li",null,[e[19]||(e[19]=n("Required for ")),t(o,{to:"/reference/YouTubeSessionGenerator/YouTubeSessionGenerator.html#createproofoforigintokenasync"},{default:r(()=>e[18]||(e[18]=[s("code",null,"CreateProofOfOriginTokenAsync",-1)])),_:1})]),s("li",null,[e[22]||(e[22]=n("If omitted, methods like ")),t(o,{to:"/reference/YouTubeSessionGenerator/YouTubeSessionGenerator.html#createvisitordataasync"},{default:r(()=>e[20]||(e[20]=[s("code",null,"CreateVisitorDataAsync",-1)])),_:1}),e[23]||(e[23]=n(" & ")),t(o,{to:"/reference/YouTubeSessionGenerator/YouTubeSessionGenerator.html#createrollouttokenasync"},{default:r(()=>e[21]||(e[21]=[s("code",null,"CreateRolloutTokenAsync",-1)])),_:1}),e[24]||(e[24]=n(" will still work."))])]),e[43]||(e[43]=a(`<div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1f1f1f;color:#b392f0;"><pre class="shiki min-dark vp-code"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> YouTubeSessionGenerator.Js.Environments;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> NodeEnvironment nodeEnvironment </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> new(&quot;C:\\\\Program Files\\\\nodejs\\\\node.exe&quot;);</span></span>
<span class="line"><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">JsEnvironment</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> nodeEnvironment;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("div",c,[e[34]||(e[34]=s("p",{class:"hint-container-title"},"Caution",-1)),s("p",null,[e[27]||(e[27]=n("If you're passing a ")),t(o,{to:"/reference/YouTubeSessionGenerator/YouTubeSessionConfig.html#jsenvironment"},{default:r(()=>e[25]||(e[25]=[s("code",null,"JsEnvironment",-1)])),_:1}),e[28]||(e[28]=n(", you are ")),e[29]||(e[29]=s("strong",null,"responsible",-1)),e[30]||(e[30]=n(" for disposing it! For example, the built-in ")),t(o,{to:"/reference/YouTubeSessionGenerator/Js/Environments/NodeEnvironment.html"},{default:r(()=>e[26]||(e[26]=[s("code",null,"NodeEnvironment",-1)])),_:1}),e[31]||(e[31]=n(" spawns a subprocess that won't be closed until ")),e[32]||(e[32]=s("strong",null,"disposed",-1)),e[33]||(e[33]=n("."))]),e[35]||(e[35]=s("p",null,[n("Use a "),s("code",null,"using"),n(" statement or manually call "),s("code",null,".Dispose()"),n(" in a "),s("code",null,"try/finally"),n(" block when done.")],-1))]),e[44]||(e[44]=a('<h4 id="built-in" tabindex="-1"><a class="header-anchor" href="#built-in"><span>Built-in</span></a></h4><p>The built-in environment uses <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node.js</a> under the hood, and supports Windows, Linux &amp; macOS.</p><details class="hint-container details"><summary>Why not use a .NET JavaScript interpreter?</summary><p>You might be wondering: <em>Why not use a .NET-based JavaScript engine like <a href="https://github.com/sebastienros/jint" target="_blank" rel="noopener noreferrer">Jint</a>, instead of depending on the bulkier <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node.js</a> runtime?</em></p><p>It’s a fair question. In theory, using something like <a href="https://github.com/sebastienros/jint" target="_blank" rel="noopener noreferrer">Jint</a> would make the library fully self-contained and cross-platform with no external dependencies.</p><p>However, generating valid <strong>Proof of Origin tokens</strong> requires more than just executing JavaScript - it requires simulating a realistic browser-like environment. Tools like <a href="https://github.com/AngleSharp/AngleSharp.js" target="_blank" rel="noopener noreferrer">AngleSharp.js</a> try to replicate the <a href="https://de.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="noopener noreferrer">DOM</a> with support for realastic JavaScript execution, but sadly these projects are not quite mature yet. Another thing we can try is to port Js-libraries like <a href="https://github.com/jsdom/jsdom" target="_blank" rel="noopener noreferrer">jsdom</a> or <a href="https://github.com/capricorn86/happy-dom" target="_blank" rel="noopener noreferrer">happy-dom</a> to pure JavaScript - without the dependecies of the <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node</a> environment. Unfortunately, even after doing that, integrity tokens generated by <a href="https://botguard.net/en/home" target="_blank" rel="noopener noreferrer">BotGuard</a> were still invalid and no WebPo minter was created, which is required for minting poTokens.</p><p>The problem probably lies in subtle but critical differences:</p><ul><li><a href="https://github.com/sebastienros/jint" target="_blank" rel="noopener noreferrer">Jint</a> lacks a proper event loop and microtasks/macrotasks queues</li><li>Available .NET <a href="https://de.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="noopener noreferrer">DOM</a> simulations aren&#39;t full-featured enough for <a href="https://botguard.net/en/home" target="_blank" rel="noopener noreferrer">BotGuard</a>&#39;s fingerprinting</li><li>Key APIs like <code>setTimeout</code>, <code>setInterval</code>, <code>performance.now()</code>, or <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node</a>&#39;s <code>vm</code> module aren&#39;t available</li></ul><p>After investing <strong>far too many hours</strong> trying to make it work, I ultimately opted for a small <a href="https://nodejs.org" target="_blank" rel="noopener noreferrer">Node.js</a> subprocess instead. It’s still much lighter than bundling a full headless browser like <a href="https://www.chromium.org/" target="_blank" rel="noopener noreferrer">Chromium</a>, and it <em>actually works</em>.</p><p>That said, this project is open-source - so if you can get it working with a pure .NET engine, I’d love to see a pull request :3</p></details><h4 id="custom" tabindex="-1"><a class="header-anchor" href="#custom"><span>Custom</span></a></h4>',4)),s("p",null,[e[37]||(e[37]=n("If you're targeting other platforms than Windows, Linux or macOS, you can implement your own JavaScript execution logic - e.g., by using a headless browser or a cloud-based JavaScript environment. To do this, you’ll need to implement the ")),t(o,{to:"/reference/YouTubeSessionGenerator/Js/IJsEnvironment.html"},{default:r(()=>e[36]||(e[36]=[s("code",null,"IJsEnvironment",-1)])),_:1}),e[38]||(e[38]=n(" interface:"))]),e[45]||(e[45]=a(`<div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1f1f1f;color:#b392f0;"><pre class="shiki min-dark vp-code"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> YouTubeSessionGenerator.Js;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> CustomJsEnvironment </span><span style="color:#BBBBBB;">:</span><span style="color:#B392F0;"> IJsEnvironment</span></span>
<span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    Task&lt;</span><span style="color:#F97583;">string</span><span style="color:#BBBBBB;">?</span><span style="color:#B392F0;">&gt; ExecuteAsync(JsScript script);</span></span>
<span class="line"><span style="color:#B392F0;">    {</span></span>
<span class="line"><span style="color:#F97583;">        string</span><span style="color:#B392F0;"> code </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> script</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">Code</span><span style="color:#B392F0;">;</span></span>
<span class="line"><span style="color:#F97583;">        object</span><span style="color:#BBBBBB;">?</span><span style="color:#B392F0;">[] args </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> script</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">Args</span><span style="color:#B392F0;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6B737C;">        // Execute the code with the given args..</span></span>
<span class="line"><span style="color:#B392F0;">    }</span></span>
<span class="line"><span style="color:#B392F0;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Make sure your custom environment supports the <a href="https://de.wikipedia.org/wiki/Document_Object_Model" target="_blank" rel="noopener noreferrer">DOM</a> and passes all tests in the <a href="https://github.com/IcySnex/YouTubeSessionGenerator/blob/main/YouTubeSessionGenerator.Tests/Js/NodeEnvironmentTests.cs" target="_blank" rel="noopener noreferrer">test suite</a>.</p><h2 id="httpclient" tabindex="-1"><a class="header-anchor" href="#httpclient"><span>HttpClient</span></a></h2>`,3)),s("p",null,[e[40]||(e[40]=n("You can inject a shared or customized HTTP client into the ")),t(o,{to:"/reference/YouTubeSessionGenerator/YouTubeSessionCreator.html"},{default:r(()=>e[39]||(e[39]=[n("YouTubeSessionCreator")])),_:1}),e[41]||(e[41]=n(", e.g., for timeouts or proxy support. This client is used to send all HTTP requests to YouTube and Google servers."))]),e[46]||(e[46]=a(`<ul><li>Type: <a href="https://learn.microsoft.com/dotnet/api/system.net.http.httpclient" target="_blank" rel="noopener noreferrer"><code>HttpClient</code></a></li><li>if omitted, a default instance will be created.</li></ul><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1f1f1f;color:#b392f0;"><pre class="shiki min-dark vp-code"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> System.Net;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> HttpClient httpClient </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> new(new HttpClientHandler() { Proxy </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> new WebProxy(&quot;http:/‎/proxyserver:80/&quot;, true) })</span></span>
<span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    Timeout </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> TimeSpan.FromSeconds(30)</span></span>
<span class="line"><span style="color:#B392F0;">};</span></span>
<span class="line"><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">HttpClient</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> httpClient;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="logger" tabindex="-1"><a class="header-anchor" href="#logger"><span>Logger</span></a></h2><p><strong>YouTubeSessionGenerator</strong> uses a standard logger to output progress, debug information and error messages. It’s built on top of <a href="https://learn.microsoft.com/dotnet/core/extensions/logging" target="_blank" rel="noopener noreferrer">Microsoft.Extensions.Logging</a>, so you can easily integrate it with any logging provider (e.g., Console, Debug, File, Serilog, etc.).</p><ul><li>Type: <a href="https://learn.microsoft.com/dotnet/api/microsoft.extensions.logging.ilogger" target="_blank" rel="noopener noreferrer"><code>ILogger</code></a></li><li>if omitted, logging is simply disabled.</li></ul><div class="language-cs line-numbers-mode" data-highlighter="shiki" data-ext="cs" data-title="cs" style="background-color:#1f1f1f;color:#b392f0;"><pre class="shiki min-dark vp-code"><code><span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> Microsoft.Extensions.Logging;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">using</span><span style="color:#B392F0;"> ILoggerFactory loggerFactory </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> LoggerFactory.Create(builder </span><span style="color:#F97583;">=</span><span style="color:#B392F0;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#B392F0;">    builder.AddConsole();</span></span>
<span class="line"><span style="color:#B392F0;">});</span></span>
<span class="line"><span style="color:#79B8FF;">config</span><span style="color:#B392F0;">.</span><span style="color:#79B8FF;">Logger</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> loggerFactory</span><span style="color:#B392F0;">.CreateLogger(</span><span style="color:#FFAB70;">&quot;YouTubeSessionGenerator&quot;</span><span style="color:#B392F0;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const f=l(u,[["render",g],["__file","configuration.html.vue"]]),v=JSON.parse('{"path":"/guide/configuration.html","title":"Configuration","lang":"en-US","frontmatter":{"title":"Configuration","icon":"weui:setting-filled","order":4,"description":"The class can be customized using the object passed to its constructor. This page outlines all available options and how to use them effectively. JsEnvironment To generate a and...","gitInclude":[],"head":[["meta",{"property":"og:url","content":"https://localhost/YouTubeSessionGenerator/guide/configuration.html"}],["meta",{"property":"og:site_name","content":"YouTubeSessionGenerator"}],["meta",{"property":"og:title","content":"Configuration"}],["meta",{"property":"og:description","content":"The class can be customized using the object passed to its constructor. This page outlines all available options and how to use them effectively. JsEnvironment To generate a and..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Configuration\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"IcySnex\\",\\"url\\":\\"https://github.com/IcySnex\\"}]}"]]},"headers":[{"level":2,"title":"JsEnvironment","slug":"jsenvironment","link":"#jsenvironment","children":[]},{"level":2,"title":"HttpClient","slug":"httpclient","link":"#httpclient","children":[]},{"level":2,"title":"Logger","slug":"logger","link":"#logger","children":[]}],"readingTime":{"minutes":2.41,"words":722},"filePathRelative":"guide/configuration.md","autoDesc":true}');export{f as comp,v as data};
